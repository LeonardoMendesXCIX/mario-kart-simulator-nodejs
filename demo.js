/**
 * Script de Demonstra√ß√£o - Mario Kart Racing Simulator
 * @author Leonardo Mendes
 */

const RaceController = require('./src/controllers/raceController');

async function runDemo() {
    console.log('üèÅ MARIO KART RACING SIMULATOR - DEMONSTRA√á√ÉO\n');
    
    const controller = new RaceController();
    
    // 1. Mostrar personagens dispon√≠veis
    console.log('üë• PERSONAGENS DISPON√çVEIS:');
    const characters = controller.getAvailableCharacters();
    characters.forEach(char => {
        console.log(`${char.emoji} ${char.name} - Vel:${char.stats.velocidade} Man:${char.stats.manobrabilidade} Pod:${char.stats.poder}`);
    });
    
    // 2. Mostrar pistas dispon√≠veis
    console.log('\nüèÅ PISTAS DISPON√çVEIS:');
    const tracks = controller.getAvailableTracks();
    tracks.forEach(track => {
        console.log(`${track.emoji} ${track.name} - ${track.difficulty} (${track.laps} voltas)`);
    });
    
    // 3. Criar e simular uma corrida
    console.log('\nüöÄ CRIANDO CORRIDA...');
    const raceResult = await controller.createRace(['mario', 'luigi', 'peach'], 'mario-circuit');
    
    if (raceResult.success) {
        console.log(`‚úÖ Corrida criada com ID: ${raceResult.raceId}`);
        
        // 4. Simular corrida completa
        console.log('\nüèÉ‚Äç‚ôÇÔ∏è SIMULANDO CORRIDA COMPLETA...\n');
        const simulationResult = await controller.simulateRace(raceResult.raceId);
        
        if (simulationResult.success) {
            console.log('üèÜ RESULTADO DA CORRIDA:');
            console.log(`ü•á Vencedor: ${simulationResult.winner.emoji} ${simulationResult.winner.name} (${simulationResult.winner.pontos} pontos)`);
            
            console.log('\nüìä CLASSIFICA√á√ÉO FINAL:');
            simulationResult.finalRanking.forEach((char, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : 'ü•â';
                console.log(`${medal} ${index + 1}¬∫ - ${char.emoji} ${char.name}: ${char.pontos} pontos`);
            });
            
            console.log('\nüìà ESTAT√çSTICAS:');
            console.log(`‚è±Ô∏è  Dura√ß√£o: ${simulationResult.stats.formattedTime}`);
            console.log(`üîÑ Rodadas: ${simulationResult.stats.totalRounds}`);
            console.log(`üë• Participantes: ${simulationResult.stats.participants}`);
            
            // 5. Mostrar algumas entradas do log
            console.log('\nüìù LOG DA CORRIDA (√∫ltimas 5 entradas):');
            const lastLogs = simulationResult.raceLog.slice(-5);
            lastLogs.forEach(log => {
                console.log(`[R${log.round}] ${log.message}`);
            });
        }
    } else {
        console.log(`‚ùå Erro ao criar corrida: ${raceResult.error}`);
    }
    
    // 6. Mostrar hist√≥rico
    console.log('\nüìö HIST√ìRICO DE CORRIDAS:');
    const history = controller.getRaceHistory();
    if (history.length > 0) {
        history.forEach((race, index) => {
            console.log(`${index + 1}. Vencedor: ${race.winner.emoji} ${race.winner.name} - ${race.endTime.toLocaleString()}`);
        });
    } else {
        console.log('Nenhuma corrida no hist√≥rico.');
    }
    
    console.log('\n‚ú® DEMONSTRA√á√ÉO CONCLU√çDA!');
    console.log('üåê Acesse http://localhost:3000 para a interface web completa!');
}

// Executar demonstra√ß√£o
if (require.main === module) {
    runDemo().catch(console.error);
}

module.exports = { runDemo };
